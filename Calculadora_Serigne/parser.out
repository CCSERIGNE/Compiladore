Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> exp PLUS exp MULTIP exp
Rule 2     exp -> exp PLUS exp
Rule 3     exp -> exp MINUS exp
Rule 4     exp -> exp MULTIP exp
Rule 5     exp -> exp DIV exp
Rule 6     exp -> LPAREN exp RPAREN
Rule 7     exp -> NUMBER
Rule 8     exp -> FLOAT
Rule 9     exp -> exp EXPOENT exp

Terminals, with rules where they appear

DIV                  : 5
EXPOENT              : 9
FLOAT                : 8
LPAREN               : 6
MINUS                : 3
MULTIP               : 1 4
NUMBER               : 7
PLUS                 : 1 2
RPAREN               : 6
error                : 

Nonterminals, with rules where they appear

exp                  : 1 1 1 2 2 3 3 4 4 5 5 6 9 9 0

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 1

state 1

    (0) S' -> exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            shift and go to state 5
    MINUS           shift and go to state 7
    MULTIP          shift and go to state 6
    DIV             shift and go to state 8
    EXPOENT         shift and go to state 9


state 2

    (6) exp -> LPAREN . exp RPAREN
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 10

state 3

    (7) exp -> NUMBER .

    PLUS            reduce using rule 7 (exp -> NUMBER .)
    MINUS           reduce using rule 7 (exp -> NUMBER .)
    MULTIP          reduce using rule 7 (exp -> NUMBER .)
    DIV             reduce using rule 7 (exp -> NUMBER .)
    EXPOENT         reduce using rule 7 (exp -> NUMBER .)
    $end            reduce using rule 7 (exp -> NUMBER .)
    RPAREN          reduce using rule 7 (exp -> NUMBER .)


state 4

    (8) exp -> FLOAT .

    PLUS            reduce using rule 8 (exp -> FLOAT .)
    MINUS           reduce using rule 8 (exp -> FLOAT .)
    MULTIP          reduce using rule 8 (exp -> FLOAT .)
    DIV             reduce using rule 8 (exp -> FLOAT .)
    EXPOENT         reduce using rule 8 (exp -> FLOAT .)
    $end            reduce using rule 8 (exp -> FLOAT .)
    RPAREN          reduce using rule 8 (exp -> FLOAT .)


state 5

    (1) exp -> exp PLUS . exp MULTIP exp
    (2) exp -> exp PLUS . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 11

state 6

    (4) exp -> exp MULTIP . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 12

state 7

    (3) exp -> exp MINUS . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 13

state 8

    (5) exp -> exp DIV . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 14

state 9

    (9) exp -> exp EXPOENT . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 15

state 10

    (6) exp -> LPAREN exp . RPAREN
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    RPAREN          shift and go to state 16
    PLUS            shift and go to state 5
    MINUS           shift and go to state 7
    MULTIP          shift and go to state 6
    DIV             shift and go to state 8
    EXPOENT         shift and go to state 9


state 11

    (1) exp -> exp PLUS exp . MULTIP exp
    (2) exp -> exp PLUS exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            reduce using rule 2 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 2 (exp -> exp PLUS exp .)
    MULTIP          reduce using rule 2 (exp -> exp PLUS exp .)
    DIV             reduce using rule 2 (exp -> exp PLUS exp .)
    EXPOENT         reduce using rule 2 (exp -> exp PLUS exp .)
    $end            reduce using rule 2 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 2 (exp -> exp PLUS exp .)

  ! MULTIP          [ shift and go to state 17 ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]


state 12

    (4) exp -> exp MULTIP exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            reduce using rule 4 (exp -> exp MULTIP exp .)
    MINUS           reduce using rule 4 (exp -> exp MULTIP exp .)
    MULTIP          reduce using rule 4 (exp -> exp MULTIP exp .)
    DIV             reduce using rule 4 (exp -> exp MULTIP exp .)
    EXPOENT         reduce using rule 4 (exp -> exp MULTIP exp .)
    $end            reduce using rule 4 (exp -> exp MULTIP exp .)
    RPAREN          reduce using rule 4 (exp -> exp MULTIP exp .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! MULTIP          [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]


state 13

    (3) exp -> exp MINUS exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            reduce using rule 3 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 3 (exp -> exp MINUS exp .)
    MULTIP          reduce using rule 3 (exp -> exp MINUS exp .)
    DIV             reduce using rule 3 (exp -> exp MINUS exp .)
    EXPOENT         reduce using rule 3 (exp -> exp MINUS exp .)
    $end            reduce using rule 3 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 3 (exp -> exp MINUS exp .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! MULTIP          [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]


state 14

    (5) exp -> exp DIV exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            reduce using rule 5 (exp -> exp DIV exp .)
    MINUS           reduce using rule 5 (exp -> exp DIV exp .)
    MULTIP          reduce using rule 5 (exp -> exp DIV exp .)
    DIV             reduce using rule 5 (exp -> exp DIV exp .)
    EXPOENT         reduce using rule 5 (exp -> exp DIV exp .)
    $end            reduce using rule 5 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 5 (exp -> exp DIV exp .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! MULTIP          [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]


state 15

    (9) exp -> exp EXPOENT exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

    PLUS            reduce using rule 9 (exp -> exp EXPOENT exp .)
    MINUS           reduce using rule 9 (exp -> exp EXPOENT exp .)
    MULTIP          reduce using rule 9 (exp -> exp EXPOENT exp .)
    DIV             reduce using rule 9 (exp -> exp EXPOENT exp .)
    EXPOENT         reduce using rule 9 (exp -> exp EXPOENT exp .)
    $end            reduce using rule 9 (exp -> exp EXPOENT exp .)
    RPAREN          reduce using rule 9 (exp -> exp EXPOENT exp .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! MULTIP          [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]


state 16

    (6) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    MULTIP          reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    EXPOENT         reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    $end            reduce using rule 6 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 6 (exp -> LPAREN exp RPAREN .)


state 17

    (1) exp -> exp PLUS exp MULTIP . exp
    (4) exp -> exp MULTIP . exp
    (1) exp -> . exp PLUS exp MULTIP exp
    (2) exp -> . exp PLUS exp
    (3) exp -> . exp MINUS exp
    (4) exp -> . exp MULTIP exp
    (5) exp -> . exp DIV exp
    (6) exp -> . LPAREN exp RPAREN
    (7) exp -> . NUMBER
    (8) exp -> . FLOAT
    (9) exp -> . exp EXPOENT exp

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3
    FLOAT           shift and go to state 4

    exp                            shift and go to state 18

state 18

    (1) exp -> exp PLUS exp MULTIP exp .
    (4) exp -> exp MULTIP exp .
    (1) exp -> exp . PLUS exp MULTIP exp
    (2) exp -> exp . PLUS exp
    (3) exp -> exp . MINUS exp
    (4) exp -> exp . MULTIP exp
    (5) exp -> exp . DIV exp
    (9) exp -> exp . EXPOENT exp

  ! reduce/reduce conflict for MULTIP resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for DIV resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for EXPOENT resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for $end resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
  ! reduce/reduce conflict for RPAREN resolved using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    PLUS            reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    MINUS           reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    MULTIP          reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    DIV             reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    EXPOENT         reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    $end            reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)
    RPAREN          reduce using rule 1 (exp -> exp PLUS exp MULTIP exp .)

  ! MULTIP          [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! PLUS            [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! MINUS           [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! DIV             [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! EXPOENT         [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! $end            [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! RPAREN          [ reduce using rule 4 (exp -> exp MULTIP exp .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 7 ]
  ! MULTIP          [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 8 ]
  ! EXPOENT         [ shift and go to state 9 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 18 resolved using rule (exp -> exp PLUS exp MULTIP exp)
WARNING: rejected rule (exp -> exp MULTIP exp) in state 18
